import tkinter as tk
from tkinter import messagebox

class CountdownTimer:
    def __init__(self, master):
        self.master = master
        master.title("Countdown Timer")
        
        # Initialize variables
        self.time_left = 0
        self.timer_running = False
        
        # Create widgets
        self.label = tk.Label(master, text="00:00", font=("Helvetica", 72))
        self.minutes_label = tk.Label(master, text="Minutes:")
        self.seconds_label = tk.Label(master, text="Seconds:")
        self.minutes_entry = tk.Entry(master)
        self.seconds_entry = tk.Entry(master)
        self.start_button = tk.Button(master, text="Start", command=self.start_timer)
        self.pause_button = tk.Button(master, text="Pause", command=self.pause_timer, state="disabled")
        self.resume_button = tk.Button(master, text="Resume", command=self.resume_timer, state="disabled")
        self.reset_button = tk.Button(master, text="Reset", command=self.reset_timer, state="disabled")
        
        # Layout widgets
        self.label.pack(pady=20)
        self.minutes_label.pack(side="left", padx=10)
        self.minutes_entry.pack(side="left", padx=10)
        self.seconds_label.pack(side="left", padx=10)
        self.seconds_entry.pack(side="left", padx=10)
        self.start_button.pack(side="left", padx=10)
        self.pause_button.pack(side="left", padx=10)
        self.resume_button.pack(side="left", padx=10)
        self.reset_button.pack(side="left", padx=10)
        
    def start_timer(self):
        if not self.timer_running:
            minutes = self.minutes_entry.get() or 0 # Get input for minutes, defaults to 0 if empty
            seconds = self.seconds_entry.get() or 0 # Get input for seconds, defaults to 0 if empty
            self.time_left = int(minutes) * 60 + int(seconds) # Convert minutes and seconds to total seconds
            self.timer_running = True
            self.minutes_entry.config(state="disabled")
            self.seconds_entry.config(state="disabled")
            self.start_button.config(state="disabled")
            self.pause_button.config(state="normal")
            self.update_timer()
        
    def pause_timer(self):
        if self.timer_running:
            self.timer_running = False
            mins, secs = divmod(self.time_left, 60)
            time_string = f"{mins:02d}:{secs:02d}"
            self.label.config(text=time_string)
            self.pause_button.config(state="disabled")
            self.resume_button.config(state="normal")
            self.reset_button.config(state="normal")

            
    def resume_timer(self):
        if not self.timer_running:
            self.timer_running = True
            self.pause_button.config(state="normal")
            self.resume_button.config(state="disabled")
            self.update_timer()
            
    def reset_timer(self):
        self.timer_running = False
        self.time_left = 0
        self.label.config(text="00:00")
        self.minutes_entry.delete(0, tk.END)
        self.seconds_entry.delete(0, tk.END)
        self.minutes_entry.config(state="normal")
        self.seconds_entry.config(state="normal")
        self.start_button.config(state="normal")
        self.pause_button.config(state="disabled")
        self.resume_button.config(state="disabled")
        self.reset_button.config(state="disabled")

    def update_timer(self):
        if self.timer_running and self.time_left > 0:
            mins, secs = divmod(self.time_left, 60)
            time_string = f"{mins:02d}:{secs:02d}"
            self.label.config(text=time_string)
            self.time_left -= 1
            self.master.after(1000, self.update_timer)    
        elif self.timer_running and self.time_left == 0:
            self.timer_running = False
            self.label.config(text="00:00")
            messagebox.showinfo("Time's up!", "The countdown timer has ended!")
            self.reset_timer()    
        else:
            self.label.config(text="00:00")

if __name__ == "__main__":
    root = tk.Tk()
    timer = CountdownTimer(root)
    root.mainloop()
